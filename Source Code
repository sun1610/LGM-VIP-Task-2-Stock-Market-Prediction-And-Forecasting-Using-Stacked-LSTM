# Task 2 :Stock Market Prediction And Forecasting Using Stacked LSTM

import numpy as np
import math
import matplotlib.pyplot as plt
import pandas as pd

data_set = pd.read_csv(r'C:\Users\HP\OneDrive\Documents\LGM-VIP\Task-2 Stock Market Prediction And Forecasting Using Stacked LSTM\NSE-Tata-Global-Beverages-Limited.csv')
data_set

data_set

data_set.describe()

data_set.tail()

data_set.dtypes

data_set['Date'].value_counts()

data_set['High'].hist()

plt.figure(figsize=(20,8))
data_set.plot()

data=data_set.filter(['Close'])
dataset = data_set.values
training_data_len=math.ceil(len(data_set)*8)
training_data_len

dataset

data_set= data_set.iloc[:, 0:5]
data_set

training_set = data_set.iloc[:,1:2].values
training_set

SCALLING OF DATA_SET

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range = (0, 1))

data_training_scaled = scaler.fit_transform(training_set)

features_set = []
labels = []
for i in range(60, 586):
    features_set.append(data_training_scaled[i-60:i, 0])
    labels.append(data_training_scaled[i, 0])

features_set, labels = np.array(features_set), np.array(labels)

features_set = np.reshape(features_set, (features_set.shape[0], features_set.shape[1], 1))
features_set.shape

BUILDING A LSTM 

import tensorflow as tf
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dense
from tensorflow.python.keras.layers import LSTM

model = Sequential()

model.compile(optimizer = 'adam', loss = 'mean_squared_error')

model.fit(features_set, labels, epochs = 50, batch_size = 20)

data_testing_complete = pd.read_csv(r'C:\Users\HP\OneDrive\Documents\LGM-VIP\Task-2 Stock Market Prediction And Forecasting Using Stacked LSTM\NSE-Tata-Global-Beverages-Limited.csv')
data_testing_processed = data_testing_complete.iloc[:, 1:2]
data_testing_processed

PREDICTION OF THE DATA 

data_total = pd.concat((data_set['Open'], data_set['Open']), axis=0)

test_inputs = data_total[len(data_total) - len(data_set) - 60:].values
test_inputs.shape

test_inputs = test_inputs.reshape(-1,1)
test_inputs = scaler.transform(test_inputs)

test_features = []
for i in range(60, 89):
    test_features.append(test_inputs[i-60:i, 0])

test_features = np.array(test_features)
test_features = np.reshape(test_features, (test_features.shape[0], test_features.shape[1], 1))
test_features.shape

predictions = model.predict(test_features)

predictions

x_train = data_set[0:1256]
y_train = data_set[1:1257]
print(x_train.shape)
print(y_train.shape)

x_train

THE NP.RANDOM.RANDN FUNCTIONS

np.random.seed(1)
np.random.randn(3, 3)

DRAW A SINGLE FORM THE NORMAL DISTRIBUTION

np.random.normal(1)

DRAW A 5 NUMBER FROM THE NORMAL DISTRIBUTION

np.random.normal(5)

np.random.seed(42)
np.random.normal(size = 1000, scale = 100).std()

PLOTTING RESULT 

plt.figure(figsize=(18,6))
plt.title("stock market price predic")
plt.plot(data_testing_complete['Close'])
plt.xlabel('Date',fontsize=18)
plt.ylabel('Total Trade Quantity',fontsize=18)
plt.show()

#Analyze the closing prices from dataframe:
data_set["Date"]=pd.to_datetime(data_set.Date)
data_set.index=data_set['Date']
#data_set.head()

plt.figure(figsize=(20,10))
plt.plot(data_set["Open"],label='ClosePriceHist')

plt.figure(figsize=(12,6))
plt.plot(data_set['Date'])
plt.xlabel('Turnover (Lacs)',fontsize=18)
plt.ylabel('Total Trade Quantity',fontsize=18)
plt.show()

#Analyze the closing prices from dataframe:
data_set["Turnover (Lacs)"]=pd.to_datetime(data_set.Date)
data_set.index=data_set['Turnover (Lacs)']
#data_set.head()

plt.figure(figsize=(20,10))
plt.plot(data_set["Turnover (Lacs)"],label='ClosePriceHist')

